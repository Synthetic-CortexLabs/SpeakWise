name: Django CI/CD Pipeline

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 coverage
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Run Black Formatter and Fix Code
      run: |
        cd backend
        black .  # Automatically reformat code
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "Auto-format code with Black" || echo "No changes to commit"  # Only commits if there are changes
        git push origin ${{ github.ref }}  # Push changes back to the branch

    - name: Run Flake8 Linter
      run: |
        cd backend
        flake8 .  # Run linting using flake8

    - name: Run Database Migrations
      run: |
        cd backend
        python manage.py migrate  # Apply migrations
        python manage.py migrate zero  # Rollback migrations to test reversibility
      env:
        DJANGO_SETTINGS_MODULE: speakwise.settings
        PYTHONPATH: ${{ github.workspace }}/backend

    - name: Run Tests with Coverage
      run: |
        cd backend
        coverage run --source='.' manage.py test  # Run tests with coverage
        coverage report -m  # Generate test coverage report
      env:
        DJANGO_SETTINGS_MODULE: speakwise.settings
        PYTHONPATH: ${{ github.workspace }}/backend

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4  # Updated to v4
      with:
        name: coverage-report
        path: backend/htmlcov/  # Upload coverage report for review if needed

  # Uncomment the Docker and deployment steps when ready to set up containerization and hosting.

  # docker:
  #   runs-on: ubuntu-latest
  #   needs: build  # Depends on successful completion of build job

  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v2

  #   - name: Log in to DockerHub
  #     uses: docker/login-action@v2
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}

  #   - name: Build Docker Image
  #     run: |
  #       docker build -t ${{ secrets.DOCKER_USERNAME }}/speakwise:latest .
  #       docker push ${{ secrets.DOCKER_USERNAME }}/speakwise:latest

  #   - name: Run Vulnerability Scan
  #     uses: aquasecurity/trivy-action@v0.0.16
  #     with:
  #       image-ref: ${{ secrets.DOCKER_USERNAME }}/speakwise:latest  # Scans for vulnerabilities

  #   - name: Deploy to Staging
  #     if: github.ref == 'refs/heads/dev'
  #     run: |
  #       # Add deployment commands to staging environment
  #       echo "Deploying to staging..."
  #       # Example: ssh user@staging-server 'docker pull ... && docker run ...'

  #   - name: Deploy to Production
  #     if: github.ref == 'refs/heads/main'
  #     run: |
  #       # Add deployment commands to production environment
  #       echo "Deploying to production..."
  #       # Example: ssh user@production-server 'docker pull ... && docker run ...'
